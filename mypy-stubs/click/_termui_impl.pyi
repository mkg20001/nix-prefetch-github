from typing import Any, Optional

from ._compat import CYGWIN as CYGWIN
from ._compat import WIN as WIN
from ._compat import get_best_encoding as get_best_encoding
from ._compat import int_types as int_types
from ._compat import isatty as isatty
from ._compat import open_stream as open_stream
from ._compat import range_type as range_type
from ._compat import strip_ansi as strip_ansi
from ._compat import term_len as term_len
from .exceptions import ClickException as ClickException
from .utils import echo as echo

BEFORE_BAR: str
AFTER_BAR: str

class ProgressBar:
    fill_char: Any = ...
    empty_char: Any = ...
    bar_template: Any = ...
    info_sep: Any = ...
    show_eta: Any = ...
    show_percent: Any = ...
    show_pos: Any = ...
    item_show_func: Any = ...
    label: Any = ...
    file: Any = ...
    color: Any = ...
    width: Any = ...
    autowidth: Any = ...
    iter: Any = ...
    length: Any = ...
    length_known: Any = ...
    pos: int = ...
    avg: Any = ...
    start: Any = ...
    eta_known: bool = ...
    finished: bool = ...
    max_width: Any = ...
    entered: bool = ...
    current_item: Any = ...
    is_hidden: Any = ...
    short_limit: float = ...
    def __init__(
        self,
        iterable: Any,
        length: Optional[Any] = ...,
        fill_char: str = ...,
        empty_char: str = ...,
        bar_template: str = ...,
        info_sep: str = ...,
        show_eta: bool = ...,
        show_percent: Optional[Any] = ...,
        show_pos: bool = ...,
        item_show_func: Optional[Any] = ...,
        label: Optional[Any] = ...,
        file: Optional[Any] = ...,
        color: Optional[Any] = ...,
        width: int = ...,
    ) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, tb: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    next: Any = ...
    def is_fast(self): ...
    def render_finish(self) -> None: ...
    @property
    def pct(self): ...
    @property
    def time_per_iteration(self): ...
    @property
    def eta(self): ...
    def format_eta(self): ...
    def format_pos(self): ...
    def format_pct(self): ...
    def format_bar(self): ...
    def format_progress_line(self): ...
    def render_progress(self) -> None: ...
    last_eta: Any = ...
    def make_step(self, n_steps: Any) -> None: ...
    def update(self, n_steps: Any) -> None: ...
    def finish(self) -> None: ...
    def generator(self) -> None: ...

def pager(generator: Any, color: Optional[Any] = ...): ...

class Editor:
    editor: Any = ...
    env: Any = ...
    require_save: Any = ...
    extension: Any = ...
    def __init__(
        self,
        editor: Optional[Any] = ...,
        env: Optional[Any] = ...,
        require_save: bool = ...,
        extension: str = ...,
    ) -> None: ...
    def get_editor(self): ...
    def edit_file(self, filename: Any) -> None: ...
    def edit(self, text: Any): ...

def open_url(url: Any, wait: bool = ..., locate: bool = ...): ...
def raw_terminal() -> None: ...
def getchar(echo: Any): ...
