from typing import Any, Optional

from ._compat import PY2 as PY2
from ._compat import filename_to_ui as filename_to_ui
from ._compat import get_filesystem_encoding as get_filesystem_encoding
from ._compat import get_streerror as get_streerror
from ._compat import open_stream as open_stream
from ._compat import text_type as text_type
from .exceptions import BadParameter as BadParameter
from .utils import LazyFile as LazyFile
from .utils import safecall as safecall

class ParamType:
    is_composite: bool = ...
    name: Any = ...
    envvar_list_splitter: Any = ...
    def __call__(
        self, value: Any, param: Optional[Any] = ..., ctx: Optional[Any] = ...
    ): ...
    def get_metavar(self, param: Any) -> None: ...
    def get_missing_message(self, param: Any) -> None: ...
    def convert(self, value: Any, param: Any, ctx: Any): ...
    def split_envvar_value(self, rv: Any): ...
    def fail(
        self, message: Any, param: Optional[Any] = ..., ctx: Optional[Any] = ...
    ) -> None: ...

class CompositeParamType(ParamType):
    is_composite: bool = ...
    @property
    def arity(self) -> None: ...

class FuncParamType(ParamType):
    name: Any = ...
    func: Any = ...
    def __init__(self, func: Any) -> None: ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class UnprocessedParamType(ParamType):
    name: str = ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class StringParamType(ParamType):
    name: str = ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class Choice(ParamType):
    name: str = ...
    choices: Any = ...
    case_sensitive: Any = ...
    def __init__(self, choices: Any, case_sensitive: bool = ...) -> None: ...
    def get_metavar(self, param: Any): ...
    def get_missing_message(self, param: Any): ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class DateTime(ParamType):
    name: str = ...
    formats: Any = ...
    def __init__(self, formats: Optional[Any] = ...) -> None: ...
    def get_metavar(self, param: Any): ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class IntParamType(ParamType):
    name: str = ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class IntRange(IntParamType):
    name: str = ...
    min: Any = ...
    max: Any = ...
    clamp: Any = ...
    def __init__(
        self, min: Optional[Any] = ..., max: Optional[Any] = ..., clamp: bool = ...
    ) -> None: ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class FloatParamType(ParamType):
    name: str = ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class FloatRange(FloatParamType):
    name: str = ...
    min: Any = ...
    max: Any = ...
    clamp: Any = ...
    def __init__(
        self, min: Optional[Any] = ..., max: Optional[Any] = ..., clamp: bool = ...
    ) -> None: ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class BoolParamType(ParamType):
    name: str = ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class UUIDParameterType(ParamType):
    name: str = ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class File(ParamType):
    name: str = ...
    envvar_list_splitter: Any = ...
    mode: Any = ...
    encoding: Any = ...
    errors: Any = ...
    lazy: Any = ...
    atomic: Any = ...
    def __init__(
        self,
        mode: str = ...,
        encoding: Optional[Any] = ...,
        errors: str = ...,
        lazy: Optional[Any] = ...,
        atomic: bool = ...,
    ) -> None: ...
    def resolve_lazy_flag(self, value: Any): ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class Path(ParamType):
    envvar_list_splitter: Any = ...
    exists: Any = ...
    file_okay: Any = ...
    dir_okay: Any = ...
    writable: Any = ...
    readable: Any = ...
    resolve_path: Any = ...
    allow_dash: Any = ...
    type: Any = ...
    name: str = ...
    path_type: str = ...
    def __init__(
        self,
        exists: bool = ...,
        file_okay: bool = ...,
        dir_okay: bool = ...,
        writable: bool = ...,
        readable: bool = ...,
        resolve_path: bool = ...,
        allow_dash: bool = ...,
        path_type: Optional[Any] = ...,
    ) -> None: ...
    def coerce_path_result(self, rv: Any): ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

class Tuple(CompositeParamType):
    types: Any = ...
    def __init__(self, types: Any) -> None: ...
    @property
    def name(self): ...
    @property
    def arity(self): ...
    def convert(self, value: Any, param: Any, ctx: Any): ...

def convert_type(ty: Any, default: Optional[Any] = ...): ...

UNPROCESSED: Any
STRING: Any
INT: Any
FLOAT: Any
BOOL: Any
UUID: Any
